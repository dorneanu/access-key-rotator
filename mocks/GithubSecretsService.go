// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/google/go-github/v33/github"
	mock "github.com/stretchr/testify/mock"
)

// GithubSecretsService is an autogenerated mock type for the GithubSecretsService type
type GithubSecretsService struct {
	mock.Mock
}

// CreateOrUpdateRepoSecret provides a mock function with given fields: ctx, owner, repo, eSecret
func (_m *GithubSecretsService) CreateOrUpdateRepoSecret(ctx context.Context, owner string, repo string, eSecret *github.EncryptedSecret) (*github.Response, error) {
	ret := _m.Called(ctx, owner, repo, eSecret)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.EncryptedSecret) *github.Response); ok {
		r0 = rf(ctx, owner, repo, eSecret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.EncryptedSecret) error); ok {
		r1 = rf(ctx, owner, repo, eSecret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRepoSecret provides a mock function with given fields: ctx, owner, repo, name
func (_m *GithubSecretsService) DeleteRepoSecret(ctx context.Context, owner string, repo string, name string) (*github.Response, error) {
	ret := _m.Called(ctx, owner, repo, name)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.Response); ok {
		r0 = rf(ctx, owner, repo, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, owner, repo, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepoPublicKey provides a mock function with given fields: ctx, owner, repo
func (_m *GithubSecretsService) GetRepoPublicKey(ctx context.Context, owner string, repo string) (*github.PublicKey, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo)

	var r0 *github.PublicKey
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.PublicKey); ok {
		r0 = rf(ctx, owner, repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.PublicKey)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(ctx, owner, repo)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, owner, repo)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListRepoSecrets provides a mock function with given fields: ctx, owner, repo, opts
func (_m *GithubSecretsService) ListRepoSecrets(ctx context.Context, owner string, repo string, opts *github.ListOptions) (*github.Secrets, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo, opts)

	var r0 *github.Secrets
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.ListOptions) *github.Secrets); ok {
		r0 = rf(ctx, owner, repo, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Secrets)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(ctx, owner, repo, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.ListOptions) error); ok {
		r2 = rf(ctx, owner, repo, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
