// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/dorneanu/go-key-rotator/entity"

	mock "github.com/stretchr/testify/mock"
)

// KeyManager is an autogenerated mock type for the KeyManager type
type KeyManager struct {
	mock.Mock
}

// CreateAccessKey provides a mock function with given fields: ctx
func (_m *KeyManager) CreateAccessKey(ctx context.Context) (entity.AccessKey, error) {
	ret := _m.Called(ctx)

	var r0 entity.AccessKey
	if rf, ok := ret.Get(0).(func(context.Context) entity.AccessKey); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(entity.AccessKey)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessKey provides a mock function with given fields: ctx, id
func (_m *KeyManager) DeleteAccessKey(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListAccessKeys provides a mock function with given fields: ctx
func (_m *KeyManager) ListAccessKeys(ctx context.Context) ([]entity.AccessKey, error) {
	ret := _m.Called(ctx)

	var r0 []entity.AccessKey
	if rf, ok := ret.Get(0).(func(context.Context) []entity.AccessKey); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.AccessKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RotateAccessKey provides a mock function with given fields: ctx, id
func (_m *KeyManager) RotateAccessKey(ctx context.Context, id string) (entity.AccessKey, error) {
	ret := _m.Called(ctx, id)

	var r0 entity.AccessKey
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.AccessKey); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.AccessKey)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
