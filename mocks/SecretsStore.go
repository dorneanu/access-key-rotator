// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/dorneanu/go-key-rotator/entity"
	mock "github.com/stretchr/testify/mock"
)

// SecretsStore is an autogenerated mock type for the SecretsStore type
type SecretsStore struct {
	mock.Mock
}

// CreateSecret provides a mock function with given fields: _a0, _a1
func (_m *SecretsStore) CreateSecret(_a0 context.Context, _a1 entity.EncryptedKey) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.EncryptedKey) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSecret provides a mock function with given fields: _a0, _a1
func (_m *SecretsStore) DeleteSecret(_a0 context.Context, _a1 entity.EncryptedKey) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.EncryptedKey) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EncryptKey provides a mock function with given fields: _a0, _a1
func (_m *SecretsStore) EncryptKey(_a0 context.Context, _a1 entity.AccessKey) (*entity.EncryptedKey, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *entity.EncryptedKey
	if rf, ok := ret.Get(0).(func(context.Context, entity.AccessKey) *entity.EncryptedKey); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.EncryptedKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.AccessKey) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecrets provides a mock function with given fields: _a0
func (_m *SecretsStore) ListSecrets(_a0 context.Context) ([]entity.AccessKey, error) {
	ret := _m.Called(_a0)

	var r0 []entity.AccessKey
	if rf, ok := ret.Get(0).(func(context.Context) []entity.AccessKey); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.AccessKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
